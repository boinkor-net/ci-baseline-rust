name: "CI/Rust - lints"
on:
  workflow_call:
    inputs:
      manifest_dir:
        description: "Directory containing the Cargo.toml of the codebase under test"
        type: string
        default: "."
      rust_toolchain:
        description: "Rust toolchain to use"
        type: string
        default: stable
      apt_install_packages:
        description: "Packages, if any, to be installed via apt on ubuntu-latest prior to running clippy. Skipped if set to the empty string."
        type: string
        default: ""
      cargo_clippy_args:
        description: "Arguments to pass to `cargo clippy`"
        type: string
        default: "-- -D warnings"

      # Used for testing this repo:
      _internal_continue_on_error:
        description: "Whether to set continue-on-error on the job; set this to true only in the tests _inside this repo_. Otherwise your workflow run will pass when it shouldn't."
        type: boolean

    outputs:
      _internal_fmt_result:
        description: "Result of the test job"
        value: ${{ jobs.cargo_fmt.outputs.result }}
      _internal_clippy_result:
        description: "Result of the test job"
        value: ${{ jobs.cargo_clippy.outputs.result }}
      _internal_deny_result:
        description: "Result of the test job"
        value: ${{ jobs.cargo_deny.outputs.result }}

env:
  CARGO_MANIFEST_DIR: ${{inputs.manifest_dir}}

jobs:
  cargo_fmt:
    name: cargo fmt ${{inputs.manifest_dir}}
    runs-on: ubuntu-latest
    continue-on-error: ${{inputs._internal_continue_on_error}}
    env:
      CARGO_TERM_COLOR: "never"
    outputs:
      result: ${{steps.fmt.outcome}}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt
          toolchain: ${{inputs.rust_toolchain}}
      - uses: r7kamura/rust-problem-matchers@v1
      - name: "cargo fmt"
        id: fmt
        run: "cargo fmt -v -- -v --check"
        working-directory: ${{inputs.manifest_dir}}

  cargo_clippy:
    name: cargo clippy ${{inputs.manifest_dir}}
    runs-on: ubuntu-latest
    continue-on-error: ${{inputs._internal_continue_on_error}}
    env:
      CARGO_TERM_COLOR: "never"
    outputs:
      result: ${{steps.clippy.outcome}}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          components: clippy
          toolchain: ${{inputs.rust_toolchain}}
      - uses: awalsh128/cache-apt-pkgs-action@v1
        if: inputs.apt_install_packages != ''
        with:
          packages: ${{inputs.apt_install_packages}}
          version: 1.0
      - uses: antifuchs/rust-problem-matchers@clippy-regex
      - run: cargo +${{inputs.rust_toolchain}} clippy ${{inputs.cargo_clippy_args}}
        id: clippy
        working-directory: ${{inputs.manifest_dir}}

  cargo_deny:
    name: cargo deny ${{inputs.manifest_dir}}
    runs-on: ubuntu-latest
    continue-on-error: ${{inputs._internal_continue_on_error}}
    outputs:
      result: ${{steps.deny.outcome}}
    steps:
      - uses: actions/checkout@v4
      - name: Check deny.toml
        id: configured
        uses: andstor/file-existence-action@v3
        with:
          files: "deny.toml"
      - name: "cargo deny"
        id: deny
        if: steps.configured.outputs.files_exists == 'true'
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: "check all"
