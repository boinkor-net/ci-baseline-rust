name: Internal job invocation that expects a lint failure result
on:
  workflow_call:
    inputs:
      expected_failure:
        description: Test that should fail
        required: true
        type: string
      manifest_dir:
        description: Directory containing the Cargo.toml manifest
        required: false
        type: string
        default: .
      rust_toolchain:
        description: Version of the rust toolchain to run against
        required: false
        type: string
        default: stable
      cargo_clippy_args:
        description: "Arguments to pass to `cargo clippy` in the test step"
        type: string

jobs:
  lints:
    uses: "./.github/workflows/ci_baseline_rust_lints.yml"
    with:
      manifest_dir: ${{inputs.manifest_dir}}
      rust_toolchain: ${{inputs.rust_toolchain}}
      cargo_clippy_args: ${{inputs.cargo_clippy_args}}
      _internal_continue_on_error: true

  expect_expected_failure:
    runs-on: ubuntu-latest
    needs: lints
    steps:
      - name: transform expected failure
        id: expected_failure
        env:
          NEEDS_JSON: ${{toJSON(needs)}}
          JQ_FAIL_PROGRAM: >
            .lints.outputs["_internal_${{inputs.expected_failure}}_result"] == "failure"
        run: >
          echo "did_fail=$(echo "$NEEDS_JSON" | jq -r "$JQ_FAIL_PROGRAM")" | tee -a $GITHUB_OUTPUT
      - name: transform expected success
        id: expected_success
        env:
          NEEDS_JSON: ${{toJSON(needs)}}
          JQ_SUCCESS_PROGRAM: >
            .lints.outputs
            | to_entries
            | map(select(.key != "_internal_${{inputs.expected_failure}}_result"))
            | map([.value == "success", .value == "skipped"] | any)
            | all
        run: >
          echo "did_succeed=$(echo "$NEEDS_JSON" | jq -r "$JQ_SUCCESS_PROGRAM")" | tee -a $GITHUB_OUTPUT
      - name: expect failure in ${{inputs.expected_failure}}
        run: exit 1
        if: steps.expected_failure.outputs.did_fail != 'true'
      - name: expect non-${{inputs.expected_failure}} tests to succeed
        run: exit 1
        if: steps.expected_success.outputs.did_succeed != 'true'
